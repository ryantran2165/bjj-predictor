{"version":3,"sources":["components/title.js","components/description.js","components/button.js","components/select.js","App.js","serviceWorker.js","index.js"],"names":["Title","text","defaultProps","Description","split","map","index","Fragment","key","Button","value","onClick","className","type","Select","fighters","onChange","id","style","width","fighter","firstName","nickname","lastName","team","App","props","componentDidMount","getFighters","a","fetch","json","then","res","sort","b","localeCompare","setState","fighter1","fighter2","console","log","handleSelect","e","target","state","selectedIndex","predict","blur","query","prediction","shouldShowPrediction","getFighterInfo","fighterInfo","wins","winsBySub","losses","lossesBySub","winsBySubPercent","toFixed","lossesBySubPercent","winRate","rel","href","getFighterNameStr","getFighterLink","getPredictionInfo","predictionInfo","winner","vsHistory","winBySub","parseFloat","winByOther","totalWin","lossBySub","lossByOther","totalLoss","draw","temp","history","length","fight","fightWinner","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3cfe64bc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Title = ({ text }) => {\r\n  return <h1>{text}</h1>;\r\n};\r\n\r\nTitle.defaultProps = {\r\n  text: \"Default Title\"\r\n};\r\n\r\nTitle.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Description = ({ text }) => {\r\n  const addLineBreaks = string =>\r\n    string.split(\"\\n\").map((text, index) => (\r\n      <React.Fragment key={`${text}-${index}`}>\r\n        {text}\r\n        <br />\r\n      </React.Fragment>\r\n    ));\r\n\r\n  return <h5>{addLineBreaks(text)}</h5>;\r\n};\r\n\r\nDescription.defaultProps = {\r\n  text: \"Default description\"\r\n};\r\n\r\nDescription.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Description;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ value, onClick }) => {\r\n  return (\r\n    <input\r\n      className=\"btn btn-primary btn-lg\"\r\n      type=\"button\"\r\n      value={value}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n\r\nButton.defaultProps = {\r\n  value: \"Default value\"\r\n};\r\n\r\nButton.propTypes = {\r\n  value: PropTypes.string,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Select = ({ fighters, onChange, id }) => {\r\n  return (\r\n    <select style={{ width: \"100%\" }} onChange={onChange} id={id}>\r\n      {fighters.map((fighter) => {\r\n        const id = fighter[\"id\"];\r\n        const firstName = fighter[\"first_name\"];\r\n        const nickname = fighter[\"nickname\"];\r\n        const lastName = fighter[\"last_name\"];\r\n        const team = fighter[\"team\"];\r\n\r\n        return (\r\n          <option key={id}>\r\n            {firstName}\r\n            {nickname ? ' \"' + nickname + '\"' : \"\"}\r\n            {\" \" + lastName}\r\n            {team ? \", \" + team : \"\"}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nSelect.defaultProps = {\r\n  fighters: [],\r\n};\r\n\r\nSelect.propTypes = {\r\n  fighters: PropTypes.array,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Select;\r\n","import React, { Component } from \"react\";\nimport Title from \"./components/title\";\nimport Description from \"./components/description\";\nimport Button from \"./components/button\";\nimport Select from \"./components/select\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fighters: [],\n      fighter1: null,\n      fighter2: null,\n      prediction: null,\n      shouldShowPrediction: false,\n    };\n  }\n\n  componentDidMount = () => {\n    this.getFighters();\n  };\n\n  getFighters = async () => {\n    const query =\n      \"http://sample-app2-dev.us-west-1.elasticbeanstalk.com/fighters\";\n    const res = await fetch(query);\n\n    // Get all fighters in alphabetical\n    res.json().then((res) => {\n      res.sort((a, b) => a[\"first_name\"].localeCompare(b[\"first_name\"]));\n      this.setState({ fighters: res, fighter1: res[0], fighter2: res[0] });\n      console.log(res);\n    });\n  };\n\n  handleSelect = (e) => {\n    // Update fighter info based on selection and hide prediction results\n    this.setState({\n      [e.target.id]: this.state.fighters[e.target.selectedIndex],\n      shouldShowPrediction: false,\n    });\n  };\n\n  predict = async (e) => {\n    e.target.blur();\n\n    const query =\n      \"http://sample-app2-dev.us-west-1.elasticbeanstalk.com/predict?id_1=\" +\n      this.state.fighter1[\"id\"] +\n      \"&id_2=\" +\n      this.state.fighter2[\"id\"];\n    const res = await fetch(query);\n\n    // Get prediction and show it\n    res.json().then((res) => {\n      this.setState({\n        prediction: res,\n        shouldShowPrediction: true,\n      });\n    });\n  };\n\n  getFighterInfo = (fighter) => {\n    let fighterInfo = <React.Fragment></React.Fragment>;\n\n    // Fighter is not null\n    if (fighter) {\n      const firstName = fighter[\"first_name\"];\n      const nickname = fighter[\"nickname\"];\n      const lastName = fighter[\"last_name\"];\n      const team = fighter[\"team\"];\n      const wins = fighter[\"wins\"];\n      const winsBySub = fighter[\"wins_by_sub\"];\n      const losses = fighter[\"losses\"];\n      const lossesBySub = fighter[\"losses_by_sub\"];\n\n      const winsBySubPercent =\n        wins > 0 ? ((winsBySub / wins) * 100).toFixed(1) : 0;\n      const lossesBySubPercent =\n        losses > 0 ? ((lossesBySub / losses) * 100).toFixed(1) : 0;\n      const winRate = ((100 * wins) / (wins + losses)).toFixed(1);\n\n      fighterInfo = (\n        <React.Fragment>\n          <a\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            href={\"https://www.bjjheroes.com/bjj-fighters/?p=\" + fighter[\"id\"]}\n          >\n            <h4 className=\"font-weight-bold\">\n              {firstName}\n              {nickname ? ' \"' + nickname + '\"' : \"\"}\n              {\" \" + lastName}\n            </h4>\n          </a>\n          <h5>{team ? team : \"\"}</h5>\n          <h5>\n            {wins} wins, {winsBySub} by submission ({winsBySubPercent}%)\n          </h5>\n          <h5>\n            {losses} losses, {lossesBySub} by submission ({lossesBySubPercent}%)\n          </h5>\n          <h5>{winRate}% win rate</h5>\n        </React.Fragment>\n      );\n    }\n    return fighterInfo;\n  };\n\n  getFighterNameStr = (fighter) => {\n    return (\n      fighter[\"first_name\"] +\n      (fighter[\"nickname\"] ? ' \"' + fighter[\"nickname\"] + '\"' : \"\") +\n      \" \" +\n      fighter[\"last_name\"]\n    );\n  };\n\n  getFighterLink = (fighter) => {\n    return (\n      <a\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n        href={\"https://www.bjjheroes.com/bjj-fighters/?p=\" + fighter[\"id\"]}\n      >\n        {this.getFighterNameStr(fighter)}\n      </a>\n    );\n  };\n\n  getPredictionInfo = () => {\n    let predictionInfo = <div className=\"pb-5\"></div>;\n\n    // Prediction is not null\n    if (this.state.shouldShowPrediction) {\n      // Results are with respect to the fighter 1\n      const vsHistory = this.state.prediction[\"vs_history\"];\n\n      let winBySub = parseFloat(this.state.prediction[\"win_by_sub\"]);\n      let winByOther = parseFloat(this.state.prediction[\"win_by_other\"]);\n      let totalWin = winBySub + winByOther;\n\n      let lossBySub = parseFloat(this.state.prediction[\"loss_by_sub\"]);\n      let lossByOther = parseFloat(this.state.prediction[\"loss_by_other\"]);\n      let totalLoss = lossBySub + lossByOther;\n\n      let draw = parseFloat(this.state.prediction[\"draw\"]);\n\n      let winner;\n      if (draw >= totalWin && draw >= totalLoss) {\n        winner = (\n          <React.Fragment>\n            DRAW (the following probabilities are for{\" \"}\n            {this.getFighterLink(this.state.fighter1)})\n          </React.Fragment>\n        );\n      } else if (totalWin > totalLoss) {\n        winner = this.getFighterLink(this.state.fighter1);\n      } else {\n        winner = this.getFighterLink(this.state.fighter2);\n\n        // Swap stats because fighter 2 is winner\n        let temp = totalWin;\n        totalWin = totalLoss;\n        totalLoss = temp;\n\n        temp = winBySub;\n        winBySub = lossBySub;\n        lossBySub = temp;\n\n        temp = winByOther;\n        winByOther = lossByOther;\n        lossByOther = temp;\n      }\n\n      // Format to percentages with one decimal\n      totalWin = (totalWin * 100).toFixed(1);\n      winBySub = (winBySub * 100).toFixed(1);\n      winByOther = (winByOther * 100).toFixed(1);\n      totalLoss = (totalLoss * 100).toFixed(1);\n      lossBySub = (lossBySub * 100).toFixed(1);\n      lossByOther = (lossByOther * 100).toFixed(1);\n      draw = (draw * 100).toFixed(1);\n\n      let history = <React.Fragment></React.Fragment>;\n      if (vsHistory.length > 0) {\n        // Sort history by competition year\n        vsHistory.sort((a, b) => a[\"year\"].localeCompare(b[\"year\"]));\n\n        history = vsHistory.map((fight) => {\n          let fightWinner;\n          if (fight[\"win_loss\"] === \"W\") {\n            fightWinner = this.getFighterLink(this.state.fighter1);\n          } else if (fight[\"win_loss\"] === \"L\") {\n            fightWinner = this.getFighterLink(this.state.fighter2);\n          } else {\n            fightWinner = \"DRAW\";\n          }\n\n          return (\n            <tr key={fight[\"competition\"] + fight[\"year\"]}>\n              <td>{fightWinner}</td>\n              <td>{fight[\"method\"]}</td>\n              <td>{fight[\"competition\"]}</td>\n              <td>{fight[\"weight\"]}</td>\n              <td>{fight[\"stage\"]}</td>\n              <td>{fight[\"year\"]}</td>\n            </tr>\n          );\n        });\n      }\n\n      predictionInfo = (\n        <React.Fragment>\n          <div className=\"row justify-content-center pt-5\">\n            <div className=\"col\">\n              <h3 className=\"font-weight-bold\">Winner: {winner}</h3>\n            </div>\n          </div>\n          <div className=\"row justify-content-center pt-3\">\n            <div className=\"col\">\n              <h5>Probability of draw: {draw}%</h5>\n            </div>\n          </div>\n          <div className=\"row justify-content-center\">\n            <div className=\"col col-lg-6 col-12\">\n              <h5>Overall probability of winning: {totalWin}%</h5>\n              <h5>Probability of winning by submission: {winBySub}%</h5>\n              <h5>Probability of winning by other means: {winByOther}%</h5>\n            </div>\n            <div className=\"col col-lg-6 col-12\">\n              <h5>Overall probability of losing: {totalLoss}%</h5>\n              <h5>Probability of losing by submission: {lossBySub}%</h5>\n              <h5>Probability of losing by other means: {lossByOther}%</h5>\n            </div>\n          </div>\n          <div className=\"row justify-content-center pt-5 pb-5\">\n            <div className=\"col\">\n              <div className=\"table-responsive\">\n                <table className=\"table table-striped table-hover text-left\">\n                  <thead>\n                    <tr>\n                      <th>Winner</th>\n                      <th>Method</th>\n                      <th>Competition</th>\n                      <th>Weight</th>\n                      <th>Stage</th>\n                      <th>Year</th>\n                    </tr>\n                  </thead>\n                  <tbody>{history}</tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n    }\n    return predictionInfo;\n  };\n\n  render() {\n    return (\n      <div className=\"App container text-center pt-5\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <Title text=\"BJJ Predictor\" />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Description\n              text={\n                \"Choose two fighters and predict who would win in a BJJ match!\"\n              }\n            />\n          </div>\n        </div>\n        <div className=\"row justify-content-center pt-5\">\n          <div className=\"col col-lg-4 col-12\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <Select\n                  fighters={this.state.fighters}\n                  onChange={this.handleSelect}\n                  id=\"fighter1\"\n                />\n              </div>\n            </div>\n            <div className=\"row pt-3\">\n              <div className=\"col\">\n                {this.getFighterInfo(this.state.fighter1)}\n              </div>\n            </div>\n          </div>\n          <div className=\"col col-lg-1 col-12 align-self-center\">\n            <h1 className=\"font-weight-bold\">VS</h1>\n          </div>\n          <div className=\"col col-lg-4 col-12\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <Select\n                  fighters={this.state.fighters}\n                  onChange={this.handleSelect}\n                  id=\"fighter2\"\n                />\n              </div>\n            </div>\n            <div className=\"row pt-3\">\n              <div className=\"col\">\n                {this.getFighterInfo(this.state.fighter2)}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row justify-content-center pt-3\">\n          <div className=\"col\">\n            <Button value=\"Predict\" onClick={this.predict} />\n          </div>\n        </div>\n        {this.getPredictionInfo()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}