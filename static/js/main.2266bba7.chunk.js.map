{"version":3,"sources":["components/button.js","components/select.js","App.js","serviceWorker.js","index.js"],"names":["Button","value","onClick","className","type","e","target","blur","Select","fighters","onChange","id","style","width","map","fighter","firstName","nickname","lastName","team","key","defaultProps","App","props","componentDidMount","getFighters","a","fetch","json","then","res","sort","b","localeCompare","setState","fighter1","fighter2","handleSelect","state","selectedIndex","predict","query","prediction","shouldShowPrediction","getFighterInfo","Fragment","wins","winsBySub","losses","lossesBySub","winsBySubPercent","toFixed","lossesBySubPercent","winRate","rel","href","getFighterNameStr","getFighterLink","getPredictionInfo","winner","vsHistory","winBySub","parseFloat","winByOther","totalWin","lossBySub","lossByOther","totalLoss","draw","temp","historySummary","vsWins","vsLosses","vsDraws","history","length","fight","fightWinner","this","bannerColor","octoColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2266bba7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ value, onClick }) => {\r\n  const handleOnClick = (e) => {\r\n    // Remove focus from button\r\n    e.target.blur();\r\n    onClick();\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className=\"btn btn-primary btn-lg\"\r\n      type=\"button\"\r\n      onClick={handleOnClick}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  value: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Select = ({ fighters, onChange, id }) => {\r\n  return (\r\n    <select style={{ width: \"100%\" }} onChange={onChange} id={id}>\r\n      {fighters.map((fighter) => {\r\n        const id = fighter[\"id\"];\r\n        const firstName = fighter[\"first_name\"];\r\n        const nickname = fighter[\"nickname\"];\r\n        const lastName = fighter[\"last_name\"];\r\n        const team = fighter[\"team\"];\r\n\r\n        return (\r\n          <option key={id}>\r\n            {firstName}\r\n            {nickname ? ' \"' + nickname + '\"' : \"\"}\r\n            {\" \" + lastName}\r\n            {team ? \", \" + team : \"\"}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nSelect.defaultProps = {\r\n  fighters: [],\r\n};\r\n\r\nSelect.propTypes = {\r\n  fighters: PropTypes.array,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Select;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"./components/button\";\r\nimport Select from \"./components/select\";\r\nimport GithubCorner from \"react-github-corner\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fighters: [],\r\n      fighter1: null,\r\n      fighter2: null,\r\n      prediction: null,\r\n      shouldShowPrediction: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.getFighters();\r\n  };\r\n\r\n  getFighters = async () => {\r\n    const query = \"https://bjj.ryanlongtran.com/fighters\";\r\n    const res = await fetch(query);\r\n\r\n    // Get all fighters in alphabetical\r\n    res.json().then((res) => {\r\n      res.sort((a, b) => a[\"first_name\"].localeCompare(b[\"first_name\"]));\r\n      this.setState({ fighters: res, fighter1: res[0], fighter2: res[0] });\r\n    });\r\n  };\r\n\r\n  handleSelect = (e) => {\r\n    // Update fighter info based on selection and hide prediction results\r\n    this.setState({\r\n      [e.target.id]: this.state.fighters[e.target.selectedIndex],\r\n      shouldShowPrediction: false,\r\n    });\r\n  };\r\n\r\n  predict = async () => {\r\n    const query =\r\n      \"https://bjj.ryanlongtran.com/predict?id_1=\" +\r\n      this.state.fighter1[\"id\"] +\r\n      \"&id_2=\" +\r\n      this.state.fighter2[\"id\"];\r\n    const res = await fetch(query);\r\n\r\n    // Get prediction and show it\r\n    res.json().then((res) => {\r\n      this.setState({\r\n        prediction: res,\r\n        shouldShowPrediction: true,\r\n      });\r\n    });\r\n  };\r\n\r\n  getFighterInfo = (fighter) => {\r\n    if (fighter === null) {\r\n      return <React.Fragment></React.Fragment>;\r\n    }\r\n\r\n    const firstName = fighter[\"first_name\"];\r\n    const nickname = fighter[\"nickname\"];\r\n    const lastName = fighter[\"last_name\"];\r\n    const team = fighter[\"team\"];\r\n    const wins = fighter[\"wins\"];\r\n    const winsBySub = fighter[\"wins_by_sub\"];\r\n    const losses = fighter[\"losses\"];\r\n    const lossesBySub = fighter[\"losses_by_sub\"];\r\n\r\n    const winsBySubPercent =\r\n      wins > 0 ? ((winsBySub / wins) * 100).toFixed(1) : 0;\r\n    const lossesBySubPercent =\r\n      losses > 0 ? ((lossesBySub / losses) * 100).toFixed(1) : 0;\r\n    const winRate = ((100 * wins) / (wins + losses)).toFixed(1);\r\n\r\n    return (\r\n      <div className=\"pt-3\">\r\n        <a\r\n          rel=\"noopener noreferrer\"\r\n          target=\"_blank\"\r\n          href={\"https://www.bjjheroes.com/bjj-fighters/?p=\" + fighter[\"id\"]}\r\n        >\r\n          <h4 className=\"font-weight-bold\">\r\n            {firstName}\r\n            {nickname ? ' \"' + nickname + '\"' : \"\"}\r\n            {\" \" + lastName}\r\n          </h4>\r\n        </a>\r\n        <h5>{team ? team : \"\"}</h5>\r\n        <h5>\r\n          {wins} wins, {winsBySub} by submission ({winsBySubPercent}%)\r\n        </h5>\r\n        <h5>\r\n          {losses} losses, {lossesBySub} by submission ({lossesBySubPercent}%)\r\n        </h5>\r\n        <h5>{winRate}% win rate</h5>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  getFighterNameStr = (fighter) => {\r\n    return (\r\n      fighter[\"first_name\"] +\r\n      (fighter[\"nickname\"] ? ' \"' + fighter[\"nickname\"] + '\"' : \"\") +\r\n      \" \" +\r\n      fighter[\"last_name\"]\r\n    );\r\n  };\r\n\r\n  getFighterLink = (fighter) => {\r\n    return (\r\n      <a\r\n        rel=\"noopener noreferrer\"\r\n        target=\"_blank\"\r\n        href={\"https://www.bjjheroes.com/bjj-fighters/?p=\" + fighter[\"id\"]}\r\n      >\r\n        {this.getFighterNameStr(fighter)}\r\n      </a>\r\n    );\r\n  };\r\n\r\n  getPredictionInfo = () => {\r\n    // Prediction is null\r\n    if (!this.state.shouldShowPrediction) {\r\n      return <React.Fragment></React.Fragment>;\r\n    }\r\n\r\n    // Results are with respect to the fighter 1\r\n    const vsHistory = this.state.prediction[\"vs_history\"];\r\n\r\n    let winBySub = parseFloat(this.state.prediction[\"win_by_sub\"]);\r\n    let winByOther = parseFloat(this.state.prediction[\"win_by_other\"]);\r\n    let totalWin = winBySub + winByOther;\r\n\r\n    let lossBySub = parseFloat(this.state.prediction[\"loss_by_sub\"]);\r\n    let lossByOther = parseFloat(this.state.prediction[\"loss_by_other\"]);\r\n    let totalLoss = lossBySub + lossByOther;\r\n\r\n    let draw = parseFloat(this.state.prediction[\"draw\"]);\r\n\r\n    let winner;\r\n    if (draw >= totalWin && draw >= totalLoss) {\r\n      winner = (\r\n        <React.Fragment>\r\n          DRAW (the following probabilities are for{\" \"}\r\n          {this.getFighterLink(this.state.fighter1)})\r\n        </React.Fragment>\r\n      );\r\n    } else if (totalWin > totalLoss) {\r\n      winner = this.getFighterLink(this.state.fighter1);\r\n    } else {\r\n      winner = this.getFighterLink(this.state.fighter2);\r\n\r\n      // Swap stats because fighter 2 is winner\r\n      let temp = totalWin;\r\n      totalWin = totalLoss;\r\n      totalLoss = temp;\r\n\r\n      temp = winBySub;\r\n      winBySub = lossBySub;\r\n      lossBySub = temp;\r\n\r\n      temp = winByOther;\r\n      winByOther = lossByOther;\r\n      lossByOther = temp;\r\n    }\r\n\r\n    // Format to percentages with one decimal\r\n    totalWin = (totalWin * 100).toFixed(1);\r\n    winBySub = (winBySub * 100).toFixed(1);\r\n    winByOther = (winByOther * 100).toFixed(1);\r\n    totalLoss = (totalLoss * 100).toFixed(1);\r\n    lossBySub = (lossBySub * 100).toFixed(1);\r\n    lossByOther = (lossByOther * 100).toFixed(1);\r\n    draw = (draw * 100).toFixed(1);\r\n\r\n    // VS history\r\n    let vsWins = 0;\r\n    let vsLosses = 0;\r\n    let vsDraws = 0;\r\n\r\n    let history = <React.Fragment></React.Fragment>;\r\n    if (vsHistory.length > 0) {\r\n      // Sort history by competition year\r\n      vsHistory.sort((a, b) => a[\"year\"].localeCompare(b[\"year\"]));\r\n\r\n      history = vsHistory.map((fight) => {\r\n        let fightWinner;\r\n        if (fight[\"win_loss\"] === \"W\") {\r\n          fightWinner = this.getFighterLink(this.state.fighter1);\r\n          vsWins++;\r\n        } else if (fight[\"win_loss\"] === \"L\") {\r\n          fightWinner = this.getFighterLink(this.state.fighter2);\r\n          vsLosses++;\r\n        } else {\r\n          fightWinner = \"DRAW\";\r\n          vsDraws++;\r\n        }\r\n\r\n        return (\r\n          <tr key={fight[\"competition\"] + fight[\"year\"]}>\r\n            <td>{fightWinner}</td>\r\n            <td>{fight[\"method\"]}</td>\r\n            <td>{fight[\"competition\"]}</td>\r\n            <td>{fight[\"weight\"]}</td>\r\n            <td>{fight[\"stage\"]}</td>\r\n            <td>{fight[\"year\"]}</td>\r\n          </tr>\r\n        );\r\n      });\r\n    }\r\n\r\n    let historySummary;\r\n    if (vsHistory.length === 0) {\r\n      historySummary = \"No VS history\";\r\n    } else {\r\n      if (vsWins === vsLosses) {\r\n        historySummary =\r\n          \"Fighters are tied \" +\r\n          vsWins +\r\n          \"-\" +\r\n          vsLosses +\r\n          \"-\" +\r\n          vsDraws +\r\n          \" (W-L-D)\";\r\n      } else {\r\n        historySummary = (\r\n          <span>\r\n            {this.getFighterLink(\r\n              vsWins > vsLosses ? this.state.fighter1 : this.state.fighter2\r\n            )}{\" \"}\r\n            leads{\" \"}\r\n            {this.getFighterLink(\r\n              vsWins > vsLosses ? this.state.fighter2 : this.state.fighter1\r\n            )}{\" \"}\r\n            {vsWins > vsLosses ? vsWins : vsLosses}-\r\n            {vsWins > vsLosses ? vsLosses : vsWins}-{vsDraws} (W-L-D)\r\n          </span>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"row justify-content-center pt-5\">\r\n          <div className=\"col\">\r\n            <h4 className=\"font-weight-bold\">Winner: {winner}</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center pt-3\">\r\n          <div className=\"col col-lg-6 col-12\">\r\n            <h5>P(win): {totalWin}%</h5>\r\n            <h5>P(win by submission): {winBySub}%</h5>\r\n            <h5>P(win by other): {winByOther}%</h5>\r\n          </div>\r\n          <div className=\"col col-lg-6 col-12\">\r\n            <h5>P(lose): {totalLoss}%</h5>\r\n            <h5>P(lose by submission): {lossBySub}%</h5>\r\n            <h5>P(lose by other): {lossByOther}%</h5>\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col\">\r\n            <h5>P(draw): {draw}%</h5>\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center pt-5 pb-3\">\r\n          <div className=\"col\">\r\n            <h5>{historySummary}</h5>\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col\">\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped table-hover text-left\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Winner</th>\r\n                    <th>Method</th>\r\n                    <th>Competition</th>\r\n                    <th>Weight</th>\r\n                    <th>Stage</th>\r\n                    <th>Year</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>{history}</tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App container text-center py-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <h1 className=\"font-weight-bold\">BJJ Predictor</h1>\r\n            <h5>\r\n              Choose two fighters and predict who would win in a BJJ match!\r\n            </h5>\r\n            <div className=\"row justify-content-center pt-5 pb-3\">\r\n              <div className=\"col col-lg-4 col-12\">\r\n                <Select\r\n                  fighters={this.state.fighters}\r\n                  onChange={this.handleSelect}\r\n                  id=\"fighter1\"\r\n                />\r\n                {this.getFighterInfo(this.state.fighter1)}\r\n              </div>\r\n              <div className=\"col col-lg-1 col-12 align-self-center\">\r\n                <h1 className=\"font-weight-bold\">VS</h1>\r\n              </div>\r\n              <div className=\"col col-lg-4 col-12\">\r\n                <Select\r\n                  fighters={this.state.fighters}\r\n                  onChange={this.handleSelect}\r\n                  id=\"fighter2\"\r\n                />\r\n                {this.getFighterInfo(this.state.fighter2)}\r\n              </div>\r\n            </div>\r\n            <Button value=\"Predict\" onClick={this.predict} />\r\n            {this.getPredictionInfo()}\r\n          </div>\r\n        </div>\r\n        <GithubCorner\r\n          href=\"https://github.com/ryantran2165/bjj-predictor\"\r\n          bannerColor=\"#222\"\r\n          octoColor=\"#7fffd4\"\r\n          target=\"_blank\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}